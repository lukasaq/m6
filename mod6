
search KEY: **important command
	      images
		 


################# MOD 6 Lessoin 1 ##################
###################Command Shell andBatch Files######################
images: ####################################
image saved: indicator and description
image saved: basic commands
image saved: batch file commands
image saved: specail variables
image saved: arithmetic operators

##########


for statements: ###########################

The for command is used to iterate each item in a set and perform some action/command. The variable used as the iterator — %variable in the above command outline — is a single character in the range a-z or A-Z, and is referenced as %%a or %%Z (%%z and %%Z are different variables). The use of the extra % operator is used in batch files and not from the CLI (where it is a single %). The various types of iterations are based on the switches below:

batch file use %%
cli use %

/l: Series of values
/f: Series of files
/d: Series of directories
/r: Each item in a directory tree

powershell: ###############################
PowerShell is a CLI shell and scripting language designed specifically for system administration. Built on .NET Framework, PowerShell helps Information Technology (IT) professionals control and automate the administration of the Windows OS and applications that run on Windows Server environments. 

The PowerShell scripting environment was designed to extend the capabilities of the Command shell to run PowerShell commands, called cmdlets. Cmdlets are similar to Windows commands, but provide a more extensible scripting language. Windows commands and PowerShell cmdlets are both able to be run in PowerShell, however, the Command shell can only run Windows commands and not PowerShell cmdlets.


- Cmdlets: Cmdlets perform common system administration tasks such as managing the registry, services, processes, event logs, and using Windows Management Instrumentation (WMI).

- Task-oriented: PowerShell scripting language is task-based and provides support for existing scripts and CLI tools.

- Consistent design: As cmdlets and system data stores use common syntax, and have common naming conventions, data sharing is easy. The output from one cmdlet can be pipelined to another cmdlet without manipulation.

- imple to use: Simplified, command-based navigation lets users navigate the registry and other data stores similar to the file system navigation.

- Object-based: PowerShell possesses powerful object manipulation capabilities. Objects can be sent to other tools or databases directly.

- Extensible interface: PowerShell is customizable as independent software vendors and enterprise developers can build custom tools and utilities using PowerShell to administer their software.

cmdlet  vs command
Cmdlets are different from commands in other command-shell environments in the following manners:

- Cmdlets are .NET Framework class objects; not just stand-alone executables. 
- Cmdlets are easily constructed from as few as a dozen lines of code.
- Parsing, error presentation, and output formatting are not handled by cmdlets. It is done by the PowerShell runtime.
- Cmdlets process works on objects not on text stream, and objects can be passed as output for pipelining.
- Cmdlets are record-based as they process a single object at a time.





































































































































































