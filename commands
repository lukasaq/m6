
search KEY: **important command
	      images

################# MOD 6 Lessoin 1 ##################
commands: ###################################
SET /A seven=4+3 :  doing small math out put is 7
set : display all the variables defined for the current CMD session
set PATH=%PATH%C:\NewFolder; : following command to set the path variable by adding an item to the list (semicolon delimited)
setx PATH "%PATH%C:\NewFolder;" : following command to update the PATH variable for the current shell and save the setting across future logins: 
      				Generally, the setx command should only be used when permanently altering the environment variable is desired. 
			        setx command operates off the current user, rather than system environment variables by default. To learn more about this command, run setx /?.

set /a total=total+1 : makes total = 1
set /a total+=1 : adds 1 to  total making in 2
if statement commands: ###############
if not exist "C:\NewFolder\NULL" mkdir "C:\NewFolder" : if does not exits will make 
for loop commands: ####################
for %variable IN (set) DO command [command-parameters] : basic syntax
for /l %%variable in (start,step,end) do (command) : basic Stepping through a series of values:
for /l %%A in (0,2,10) do echo %%A : Stepping through a series of values example
for %%variable in (fileSet) do (command) : basic Looping through files
for %%B in (%USERPROFILE%\Desktop\*) do echo %%B : Looping through files example
for /d %%variable in (directorySet) do (command) : basic Looping through directories
for /d %%C in (%PUBLIC%\* %USERPROFILE%\*) do echo %%C : Looping through directories example
**important command : for /r "%USERPROFILE%" %%D in (*) do echo %%D : Looping through directories, recursively: **
**important command : for /r "%USERPROFILE%" %%D in (*.bat) do echo %%D : Looping through directories, recursively: **
for /f ["options"] %%variable in (source) do (command) : basic Parsing File Content and Output
@echo off
for /f "tokens=1-4" %%A in (hosts.txt) do ( echo host: %%A IP Address: %%B Department: %%C Email: %%D) : Parsing File Content and Output example
Gather System Information commands: ##############
note pad plugin: (one)
host_baseline.bat cda-win-hunt_baseline.txt : will output to file from  (one)
dir host* : check for host
host_baseline_autodelete.bat cda-win-hunt_baseline2.txt : ran will give systeminfo then auto delte itself
dir host* :  verifgfy that it deleted it self
powershell commands: ################
Get-Help New-Item :  Get-Help cmdlet to retrieve the syntax for the New-Item cmdlet
Get-Help New-Item -full : more verbose listing (-full)
Get-Help New-Item -examples : can show examples (-examples). The examples are included in the -full output.
New-Item -Path 'C:\users\trainee\temp' -ItemType Directory : creates new directory "temp"
Copy-Item 'C:\users\trainee\temp' 'C:\users\trainee\temp2' : Copy-Item cmdlet is used to copy a directory by passing the path of the directory to be copied and destination path where the folder is to be copied.
Remove-Item 'C:\users\trainee\temp2' : removes specified directory
Move-Item 'C:\users\trainee\temp' 'c:\users\trainee\old_temp' : moves item from one place to another will create directory if not already exist
Rename-Item 'C:\users\trainee\old_temp' 'c:\users\trainee\new_temp' : rename item to
 Test-Path 'C:\users\trainee\test' : will give true or fales if the directory / folder exist fales does not exsit if true is does
Test-Path 'C:\users\trainee\new_temp' : true
dir : check direcoty listing same as "get-childitem"
powershell scripts: ########################
Get-ExecutionPolicy :  policy that restricts script execution. A user can check this policy by running the
Get-Process : Shows the processes currently running on the computer
Get-Service : Shows the list of services with their status
Get-Content : Shows the content of the file specified
Get-Help : cmdlet to view the help for all available cmdlets:
Parameters : ####################
Get-Service -Name W* : shows all services whose names start with W:
Get-Process | Get-Member :  Get-Member command is used to display the parameters for a specific cmdlet (in this example for the Get-Process cmdlet):
Get-Help Get-Process -Examples : user can make sure the help is current and get examples for a cmdlet (such as Get-Process)
Start-Process notepad : opens notepad
Stop-Process [noteopad/PID]: stop process base of name or PID
pipelines: ###################
Command-1 | Command-2 | Command-3 : example of piping commands
Get-Process notepad | Stop-Process : get process notepoad and then stops it
Get-Service termservice | Start-Service : gets the service termservice and then starts it
Get-Process | Sort-Object -Property handles : gets list of process and sortys by property handles
Get-Help Start-Service -Full : determine which of the parameters of the Start-Service cmdlet accepts pipeline input,
et-Help Start-Service -Parameter * : all serices listed by paramaters
Scripting in PowerShell: #######################
Stop-Process -ProcessName chrome : stops google chrome
ForEach-Object : performs an operation on each item in a collection of input objects
 Where-Object : provides finer control over the specific properties to filter on and is used in pipelines to specify specific objects to perform actions on.


################# MOD 6 Lessoin 2 ##################
parameters: ##########
MYFIRSTVAR=”This is my first variable” : assigns the string This is my first variable to the variable MYFIRSTVAR.
HISTCONTROL=$HISTCONTROL:ignorespace : command procceded by space wont show in history command
man man : manual for th man command syntax info etc
man n command : n choose number section you wanna look at
which bash : command to locate the executable bash within the path
important: chmod u+x script path : chnage perm of file so it can execute
./<criptname> : execute a script 

write script: ####################
nano <scriptname>
copy script to nano
CTRL + x
y
enter
chmod u+x <script>
./<script>
find command
find /var/log -name "*.log : Find files that have an extension of .log
grep command: ################
grep [OPTIONS] PATTERN [FILE...]--help — Output a usage message and exit
-E, --extended-regexp — Interpret the pattern as an extended regular expression
-F, --fixed-strings — Interpret the pattern as a list of fixed strings instead of regular expressions
-G, --basic-regexp — Interpret the pattern as a basic regular expression (default)
-P, --perl-regexp — Interpret the pattern as a Perl regular expression-e PATTERN, --regexp=PATTERN — Use PATTERN as the pattern. Multiple 
-e can be used to specify different search patterns
-f FILE, --file=FILE — Obtain patterns from FILE, one per line
-i, --ignore-case — Ignore case distinction in both the PATTERN and the input files
-v, --invert-match — Invert the sense of matching (select the non-matching lines)
-w, --word-regexp — Only return lines containing matches that form whole words
-x, --line-regexp — Only return matches that exactly match the whole line
-c, --count — Suppress normal output and only print a count of matching lines for each input file
-L, --files-without-match — Suppress normal output and only print the name of each input file which have no matches to the PATTERN
-l, --files-with-matches — Suppress normal output and print the name of each input file which have matches to the PATTERN
-n, --line-number — Prefix each line of output with the line number within its input file
-A NUM, --after-context=NUM — Print NUM lines of trailing context after matching lines
-B NUM, --before-context=NUM — Print NUM lines of leading context before matching lines
-C NUM, --context=NUM — Print NUM lines of both input and output context
-r, --recursive — Read all files under each directory, recursively
grep root /var/log/* : Find the word root in all files in the /var/log directory:
grep -r root /var/log/* : Find the word root recursively in all files below the /var/log directory
dmesg | grep -C 2 boot : Run the dmesg (kernel ring buffer) output through grep and search for the word boot and show two lines before and after the matching line
dmesg | grep -c boot : Repeat the same as the last, but just show a count of the matching lines
cat: ########################
cat : read files to console
CUT: #########################
cut command removes sections from each line of a file. When no FILE or when FILE is -, read from standard input. 
common options are shown below
cut OPTION... [FILE]...
-b, --bytes=LIST — Select only these bytes
-c, --characters=LIST — Select only these characters
-d, --delimiter=DELIM — Use DELIM instead of TAB for field delimiter
-f, --fields=LIST — Select only these fields; also print any line that contains no delimiter character, unless -s option is specified
-s, --only-delimited — Only print lines that contain delimiters
--output-delimiter=STRING — Use STRING as the output delimiter; the default is to use the input delimiter
-z, --zero-terminated — Line delimiter is NULL, not newline
/etc/passwd file format : username:password:user ID:group ID:user name or comment:home directory: command interpreter or shell
important : cut -d ":" -f1,7 /etc/passwd : cut command extracts specific fields, such as the username and the user’s shell with the following command
TR command: #################
 tr command translates or delete characters from standard input;
cat /etc/hosts | tr [:lower:] [:upper:] : he tr command translates all lower case letters to upper case letters
sort command: #############
cut -d":" -f1 /etc/passwd | head -10 | sort : sorts the first 10 usernames in the /etc/passwd file
diff command ############ 
 diff command compares files line by line to identify differences. 
diff dirlist1.txt dirlist2.txt : his example shows differences in the file size of dirlist2.txt and new files dirlist1.txt and newfile:
kill command #############
kill command sends a signal to a process or processes. The default signal for kill is SIGTERM
LSOF Command ###############
lsof command, or LiSt Open Files, lists standard output file information about files opened by processes
lsof -p 8854 : display the open files associated with a specific process (in this case, Bash PID 8854):
lsof +d /tmp : display the open files associated with a directory
timeout command ###################
timeout command runs a command with a time limit and kills it if still running after a set duration.
sed command ####################
sed stream editor performs basic text transformations on an input stream
sed 's/host/lost/' /etc/hosts : simple sed command to replace the word host with lost in the file /etc/services
AWK and GAWK command #######################
awk and gawk commands are used for pattern scanning and processing of files and standard input.
awk '{print}' /etc/passwd :  This example does not have a pattern to match, so it matches all lines, and the {print} command prints all lines of the file (snippet shown)
awk '/bash/ {print}' /etc/passwd : find all and print all lines in the /etc/passwd file that have Bash specified:
important : awk 'BEGIN { FS=":" }; {print $1,$7}' /etc/passwd : basicly as cut command seen earlier


























